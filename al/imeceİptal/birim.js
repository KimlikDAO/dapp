/**
 * @fileoverview Ä°mece iptal parÃ§asÄ±. DOM'da `im` Ã¶neki bu parÃ§aya ayrÄ±lmÄ±ÅŸtÄ±r.
 */

import { AÄŸBilgileri, AÄŸBilgisi } from "/birim/aÄŸlar/birim";
import CÃ¼zdan from "/birim/cÃ¼zdan/birim";
import { ChainId } from "/lib/crosschain/chainId";
import TCKT from "/lib/ethereum/TCKT";
import evm from "/lib/ethereum/evm";
import dom from "/lib/util/dom";

/** @const {!Element} */
const KÃ¶k = /** @type {!Element} */(dom.adla("im"));
/** @const {!Element} */
const EÅŸikGirdisi = /** @type {!Element} */(dom.adla("imt"));
/** @const {!Element} */
const GÃ¶sterButonu = /** @type {!Element} */(dom.adla("imbe"));
/** @const {!Element} */
const Ä°ptalButonu = /** @type {!Element} */(dom.adla("imbh"));
/** @const {!Element} */
const Ä°ptalciler = /** @type {!Element} */(dom.adla("imf"));
/** @const {!Element} */
const Kutu = /** @type {!Element} */(dom.adla("imc"));
/** @const {!Element} */
const ToplamAÄŸÄ±rlÄ±k = /** @type {!Element} */(dom.adla("ims"));

/**
 * @param {ChainId} aÄŸ Native tokeninde TCKT fiyatÄ±nÄ±n gÃ¶sterileceÄŸi aÄŸ.
 */
const fiyatGÃ¶ster = (aÄŸ) => {
  /** @const {!Element} */
  const indirimsizFiyat = /** @type {!Element} */(dom.adla("imft"));
  /** @const {!Element} */
  const indirimliFiyat = /** @type {!Element} */(dom.adla("imfs"));
  /** @const {!Element} */
  const indirimYÃ¼zdesi = /** @type {!Element} */(dom.adla("imfu"));

  /**
   * @type {!AÄŸBilgisi}
   * @const
   */
  const aÄŸBilgisi = AÄŸBilgileri[aÄŸ];
  /** @const {string} */
  const token = aÄŸBilgisi.token || aÄŸBilgisi.tokenKodu;
  /** @const {!Array<string>} */
  const ek = aÄŸBilgisi.tokenEki;
  TCKT.priceIn(aÄŸ, 0).then(([Ã§ok, az]) => {
    indirimsizFiyat.innerText = dom.paradanMetne(Ã§ok) + " " + token + (dom.TR ? ek[0] : "");
    indirimliFiyat.innerText = dom.paradanMetne(az) + " " + token + (dom.TR ? ek[1] : "");
    indirimYÃ¼zdesi.innerText = Math.round(100 * (Ã§ok - az) / Ã§ok);
  });
}

const gÃ¶ster = () => {
  fiyatGÃ¶ster(CÃ¼zdan.aÄŸ());
  CÃ¼zdan.aÄŸDeÄŸiÅŸince(fiyatGÃ¶ster);
  KÃ¶k.classList.remove("disabled");
}

/**
 * Ä°mece iptal kurulumunu yapar ve verilmiÅŸ callback fonksiyonunu Ã§aÄŸÄ±rÄ±r.
 * 
 * @param {function(!Object<string, number>, number)} sonra
 */
const kurVe = (sonra) => {
  GÃ¶sterButonu.onclick = () => kutularÄ±AÃ§(sonra);
  Ä°ptalButonu.onclick = () => atla(sonra);
}

/**
 * @param {function(!Object<string, number>, number)} sonra
 */
const atla = (sonra) => {
  dom.gÃ¶ster(GÃ¶sterButonu);
  GÃ¶sterButonu.innerText = dom.TR ? "Yine de kur" : "Setup social revoke";
  dom.gÃ¶ster(Ä°ptalButonu);
  Ä°ptalButonu.innerText = dom.TR ? "Ä°mece iptal kurulmadÄ± ğŸ¤Œ" : "Skipped ğŸ¤Œ";
  Ä°ptalButonu.classList.add("done");
  dom.dÃ¼ÄŸmeDurdur(Ä°ptalButonu);
  KÃ¶k.classList.add("done");
  dom.gizle(Kutu);
  sonra({}, 0);
}

/**
 * @param {function(!Object<string, number>, number)} sonra
 */
const kutularÄ±AÃ§ = (sonra) => {
  /** @const {!Element} */
  const iptalciGirdisiEkleDÃ¼ÄŸmesi = /** @type {!Element} */(dom.adla("imba"));
  /** @const {!Element} */
  const eÅŸikDÃ¼ÅŸÃ¼rDÃ¼ÄŸmesi = /** @type {!Element} */(dom.adla("imtm"));
  /** @const {!Element} */
  const eÅŸikArtÄ±rDÃ¼ÄŸmesi = /** @type {!Element} */(dom.adla("imtp"));
  /** @const {!Element} */
  const tamamDÃ¼ÄŸmesi = /** @type {!Element} */(dom.adla("imbt"));
  /** @const {!Element} */
  const atlaDÃ¼ÄŸmesi = /** @type {!Element} */(dom.adla("imbi"));

  KÃ¶k.classList.remove("done");
  dom.gÃ¶ster(Kutu);
  dom.gizle(GÃ¶sterButonu);
  dom.gizle(Ä°ptalButonu);
  atlaDÃ¼ÄŸmesi.onclick = () => atla(sonra);

  /** @const {NodeList<!Element>} */
  const satÄ±r = Ä°ptalciler.children;
  for (let i = 0; i < satÄ±r.length; ++i)
    iÅŸlevEkle(satÄ±r[i]);

  iptalciGirdisiEkleDÃ¼ÄŸmesi.onclick = iptalciGirdisiEkle;
  EÅŸikGirdisi.onblur = eÅŸikDeÄŸeriBlurOlunca;
  eÅŸikDÃ¼ÅŸÃ¼rDÃ¼ÄŸmesi.onclick = () => eÅŸikBirDeÄŸiÅŸtir(false);
  eÅŸikArtÄ±rDÃ¼ÄŸmesi.onclick = () => eÅŸikBirDeÄŸiÅŸtir(true);
  tamamDÃ¼ÄŸmesi.onclick = () => {
    /** @type {!Object<string, number>} */
    let adresAÄŸÄ±rlÄ±ÄŸÄ± = {};
    /** @type {boolean} */
    let geÃ§erli = true;
    /** @type {number} */
    let toplamAÄŸÄ±rlÄ±k = 0;

    /** @const {NodeList<!Element>} */
    const satÄ±r = Ä°ptalciler.children;
    for (let /** number */ i = 0; i < satÄ±r.length; ++i) {
      /** @const {!Element} */
      const girdi = /** @type {!Element} */(satÄ±r[i].firstElementChild);
      /** @const {string} */
      const adres = girdi.value;
      if (!evm.adresGeÃ§erli(adres) || adres in adresAÄŸÄ±rlÄ±ÄŸÄ± ||
        adres.toLowerCase() == CÃ¼zdan.adres().toLowerCase()) {
        geÃ§erli = false;
        satÄ±r[i].firstElementChild.classList.add("imin");
      } else {
        /** @type {number} */
        const aÄŸÄ±rlÄ±k = +satÄ±r[i].children[3].value;
        adresAÄŸÄ±rlÄ±ÄŸÄ±[adres] = aÄŸÄ±rlÄ±k;
        toplamAÄŸÄ±rlÄ±k += aÄŸÄ±rlÄ±k;
      }
    }
    /** @type {number} */
    const eÅŸikDeÄŸeri = +EÅŸikGirdisi.value;
    if (toplamAÄŸÄ±rlÄ±k < eÅŸikDeÄŸeri) {
      geÃ§erli = false;
      EÅŸikGirdisi.classList.add("imin");
    }
    if (Object.keys(adresAÄŸÄ±rlÄ±ÄŸÄ±).length < 3) {
      geÃ§erli = false;
    }
    if (geÃ§erli) {
      dom.gÃ¶ster(Ä°ptalButonu);
      Ä°ptalButonu.innerText = dom.TR ? "Ä°mece iptal kuruldu âœ“" : "Social revoke setup is complete âœ“";
      Ä°ptalButonu.onclick = null;
      dom.gizle(Kutu);
      KÃ¶k.classList.add("done");
      sonra(adresAÄŸÄ±rlÄ±ÄŸÄ±, eÅŸikDeÄŸeri);
    }
  };
}

/**
 * @param {!Element} satÄ±r
 */
const iÅŸlevEkle = (satÄ±r) => {
  /** @const {NodeList<!Element>} */
  const elemanlar = satÄ±r.children;
  elemanlar[0].value = "";
  elemanlar[0].onblur = (e) => girdiDÃ¼zelt(e.target);
  elemanlar[0].classList.remove("imin");
  elemanlar[1].onclick = yapÄ±ÅŸtÄ±r;
  elemanlar[2].onclick = birAzalt;
  elemanlar[3].onblur = aÄŸÄ±rlÄ±kBlurOlunca;
  elemanlar[3].onclick = (e) => e.target.value = "";
  elemanlar[3].value = 1;
  elemanlar[4].onclick = birArttÄ±r;
  elemanlar[5].onclick = iptalciGirdisiSil;
}

const iptalciGirdisiEkle = () => {
  /** @const {number} */
  const tane = Ä°ptalciler.childElementCount;
  if (tane >= 5) return;
  /** @const {!Element} */
  const yeniSatÄ±r = Ä°ptalciler.firstElementChild.cloneNode(true);
  iÅŸlevEkle(yeniSatÄ±r);
  if (tane >= 3)
    Ä°ptalciler.classList.add("im4");
  Ä°ptalciler.appendChild(yeniSatÄ±r);
  aÄŸÄ±rlÄ±kHesapla();
}

const iptalciGirdisiSil = (event) => {
  /** @type {Element} */
  const a = event.target.nodeName == "A"
    ? event.target : event.target.parentElement
  const satÄ±rSayÄ±sÄ± = Ä°ptalciler.childElementCount;
  // Silmeden Ã¶nceki sayÄ± 4 ise, x'leri kaldÄ±r.
  if (satÄ±rSayÄ±sÄ± <= 4)
    Ä°ptalciler.classList.remove("im4");
  if (satÄ±rSayÄ±sÄ± > 3)
    a.parentElement.remove();
  aÄŸÄ±rlÄ±kHesapla();
}

/**
 * @param {Event} event
 */
const eÅŸikDeÄŸeriBlurOlunca = (event) => {
  /** @const {boolean} */
  const geÃ§erli = +event.target.value <= +ToplamAÄŸÄ±rlÄ±k.value;
  EÅŸikGirdisi.classList.toggle("imin", geÃ§erli);
}

/**
 * @param {Element} girdi
 */
const girdiDÃ¼zelt = (girdi) => {
  /** @const {string} */
  const deÄŸer = girdi.value;
  /** @const {?string} */
  const dÃ¼z = evm.adresDÃ¼zelt(deÄŸer);
  if (dÃ¼z) girdi.value = dÃ¼z
  /** @const {boolean} */
  const hataVar = deÄŸer != "" &&
    (!dÃ¼z || deÄŸer.toLowerCase() == CÃ¼zdan.adres().toLowerCase())
  girdi.classList.toggle("imin", hataVar);
}

/**
 * @param {Event} event
 */
const yapÄ±ÅŸtÄ±r = (event) => {
  /** @type {Element} */
  let a = /** @type {Element} */(event.target);
  for (; a.nodeName !== 'A'; a = a.parentElement)
    if (a.nodeName == 'DIV') return;
  const girdi = a.previousElementSibling;
  navigator.clipboard.readText().then(
    (deÄŸer) => {
      girdi.value = deÄŸer;
      girdiDÃ¼zelt(girdi);
    })
}

const birAzalt = (event) => {
  const node = event.target.nextElementSibling;
  if (node.value == 1) return;
  node.value = +node.value - 1;
  aÄŸÄ±rlÄ±kHesapla();
}

const birArttÄ±r = (event) => {
  const node = event.target.previousElementSibling;
  if (node.value == 9) return;
  node.value = +node.value + 1;
  aÄŸÄ±rlÄ±kHesapla();
}

const aÄŸÄ±rlÄ±kBlurOlunca = (event) => {
  let val = event.target.value;
  if (val > 9) event.target.value = 9;
  if (val < 1 || val == "") event.target.value = 1;
  aÄŸÄ±rlÄ±kHesapla();
}

const eÅŸikBirDeÄŸiÅŸtir = (artÄ±r) => {
  /** @const {number} */
  const deÄŸer = +EÅŸikGirdisi.value;
  /** @const {number} */
  const toplam = +ToplamAÄŸÄ±rlÄ±k.value;
  EÅŸikGirdisi.value = artÄ±r
    ? Math.min(deÄŸer + 1, 99, toplam) : Math.max(deÄŸer - 1, 1);
}

const aÄŸÄ±rlÄ±kHesapla = () => {
  /** @type {number} */
  let total = 0;
  /** @const {NodeList<!Element>} */
  const satÄ±r = Ä°ptalciler.children;
  for (let /** number */ i = 0; i < satÄ±r.length; ++i) {
    total += +satÄ±r[i].children[3].value;
  }
  ToplamAÄŸÄ±rlÄ±k.value = total;
  if (EÅŸikGirdisi.value > total)
    EÅŸikGirdisi.value = total;
}

export default { kurVe, gÃ¶ster };
